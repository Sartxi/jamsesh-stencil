/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { JamSeshTrack, JamSeshUser } from "./global/interface";
import { MatchResults } from "@stencil-community/router";
export namespace Components {
    interface AppHome {
    }
    interface AppRoot {
    }
    interface GroupMap {
        "group": number;
        "selectedUser": number;
    }
    interface JamCard {
        "track": JamSeshTrack;
    }
    interface JamPlayer {
        "track": JamSeshTrack;
    }
    interface MapGl {
        "apiKey": string;
        "users": Array<JamSeshUser>;
    }
    interface SpotifyPlayer {
        "userId": number;
    }
    interface UserCard {
        "simple": boolean;
        "userId": number;
    }
    interface UserGroups {
        "match": MatchResults;
    }
    interface UserProfile {
        "match": MatchResults;
    }
}
declare global {
    interface HTMLAppHomeElement extends Components.AppHome, HTMLStencilElement {
    }
    var HTMLAppHomeElement: {
        prototype: HTMLAppHomeElement;
        new (): HTMLAppHomeElement;
    };
    interface HTMLAppRootElement extends Components.AppRoot, HTMLStencilElement {
    }
    var HTMLAppRootElement: {
        prototype: HTMLAppRootElement;
        new (): HTMLAppRootElement;
    };
    interface HTMLGroupMapElement extends Components.GroupMap, HTMLStencilElement {
    }
    var HTMLGroupMapElement: {
        prototype: HTMLGroupMapElement;
        new (): HTMLGroupMapElement;
    };
    interface HTMLJamCardElement extends Components.JamCard, HTMLStencilElement {
    }
    var HTMLJamCardElement: {
        prototype: HTMLJamCardElement;
        new (): HTMLJamCardElement;
    };
    interface HTMLJamPlayerElement extends Components.JamPlayer, HTMLStencilElement {
    }
    var HTMLJamPlayerElement: {
        prototype: HTMLJamPlayerElement;
        new (): HTMLJamPlayerElement;
    };
    interface HTMLMapGlElement extends Components.MapGl, HTMLStencilElement {
    }
    var HTMLMapGlElement: {
        prototype: HTMLMapGlElement;
        new (): HTMLMapGlElement;
    };
    interface HTMLSpotifyPlayerElement extends Components.SpotifyPlayer, HTMLStencilElement {
    }
    var HTMLSpotifyPlayerElement: {
        prototype: HTMLSpotifyPlayerElement;
        new (): HTMLSpotifyPlayerElement;
    };
    interface HTMLUserCardElement extends Components.UserCard, HTMLStencilElement {
    }
    var HTMLUserCardElement: {
        prototype: HTMLUserCardElement;
        new (): HTMLUserCardElement;
    };
    interface HTMLUserGroupsElement extends Components.UserGroups, HTMLStencilElement {
    }
    var HTMLUserGroupsElement: {
        prototype: HTMLUserGroupsElement;
        new (): HTMLUserGroupsElement;
    };
    interface HTMLUserProfileElement extends Components.UserProfile, HTMLStencilElement {
    }
    var HTMLUserProfileElement: {
        prototype: HTMLUserProfileElement;
        new (): HTMLUserProfileElement;
    };
    interface HTMLElementTagNameMap {
        "app-home": HTMLAppHomeElement;
        "app-root": HTMLAppRootElement;
        "group-map": HTMLGroupMapElement;
        "jam-card": HTMLJamCardElement;
        "jam-player": HTMLJamPlayerElement;
        "map-gl": HTMLMapGlElement;
        "spotify-player": HTMLSpotifyPlayerElement;
        "user-card": HTMLUserCardElement;
        "user-groups": HTMLUserGroupsElement;
        "user-profile": HTMLUserProfileElement;
    }
}
declare namespace LocalJSX {
    interface AppHome {
    }
    interface AppRoot {
    }
    interface GroupMap {
        "group"?: number;
        "selectedUser"?: number;
    }
    interface JamCard {
        "track"?: JamSeshTrack;
    }
    interface JamPlayer {
        "track"?: JamSeshTrack;
    }
    interface MapGl {
        "apiKey"?: string;
        "onUserTapped"?: (event: CustomEvent<number>) => void;
        "users"?: Array<JamSeshUser>;
    }
    interface SpotifyPlayer {
        "userId"?: number;
    }
    interface UserCard {
        "onUserTapped"?: (event: CustomEvent<number>) => void;
        "simple"?: boolean;
        "userId"?: number;
    }
    interface UserGroups {
        "match"?: MatchResults;
    }
    interface UserProfile {
        "match"?: MatchResults;
    }
    interface IntrinsicElements {
        "app-home": AppHome;
        "app-root": AppRoot;
        "group-map": GroupMap;
        "jam-card": JamCard;
        "jam-player": JamPlayer;
        "map-gl": MapGl;
        "spotify-player": SpotifyPlayer;
        "user-card": UserCard;
        "user-groups": UserGroups;
        "user-profile": UserProfile;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "app-home": LocalJSX.AppHome & JSXBase.HTMLAttributes<HTMLAppHomeElement>;
            "app-root": LocalJSX.AppRoot & JSXBase.HTMLAttributes<HTMLAppRootElement>;
            "group-map": LocalJSX.GroupMap & JSXBase.HTMLAttributes<HTMLGroupMapElement>;
            "jam-card": LocalJSX.JamCard & JSXBase.HTMLAttributes<HTMLJamCardElement>;
            "jam-player": LocalJSX.JamPlayer & JSXBase.HTMLAttributes<HTMLJamPlayerElement>;
            "map-gl": LocalJSX.MapGl & JSXBase.HTMLAttributes<HTMLMapGlElement>;
            "spotify-player": LocalJSX.SpotifyPlayer & JSXBase.HTMLAttributes<HTMLSpotifyPlayerElement>;
            "user-card": LocalJSX.UserCard & JSXBase.HTMLAttributes<HTMLUserCardElement>;
            "user-groups": LocalJSX.UserGroups & JSXBase.HTMLAttributes<HTMLUserGroupsElement>;
            "user-profile": LocalJSX.UserProfile & JSXBase.HTMLAttributes<HTMLUserProfileElement>;
        }
    }
}
